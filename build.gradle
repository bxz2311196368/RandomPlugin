buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '1.0'
group = 'com.bxzmod.randomplugin' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'randomplugin'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Mojang ships Java 8 to end users, so your mod should target Java 8.

configurations {
    embed
    compile.extendsFrom(embed)
}
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'


            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'mixin.debug', 'true'
            property 'mixin.debug.export', 'true'
            property 'mixin.hotSwap', 'true'
            property 'mixin.checks.interfaces', 'true'

            args (['--tweakClass', 'com.bxzmod.randomplugin.tweak.ModTweaker',
                    '--username','0x00000000','--uuid','e1965b52bc8f995f3766d820e4b3717b',
                    '--accessToken','e1965b52bc8f995f3766d820e4b3717b','--userType','Legacy',
                    '--mixin','mixins.bxz.json'])

            mods {
                randomplugin {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'


            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'mixin.debug', 'true'
            property 'mixin.debug.export', 'true'
            property 'mixin.hotSwap', 'true'
            property 'mixin.checks.interfaces', 'true'

            args (['--tweakClass', 'com.bxzmod.randomplugin.tweak.ModTweaker','--mixin', 'mixins.bxz.json'])

            mods {
                randomplugin {
                    source sourceSets.main
                }
            }
        }

    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    disableTargetValidator = true
    add sourceSets.main,  "mixins.bxz.refmap.json"
}

repositories {
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url 'https://maven.mcmoddev.com'}
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'

    compile fileTree ("libs")
    compileOnly fileTree("providedLibs")

    embed 'org.spongepowered:mixin:0.8.2'

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from configurations.embed.collect {
        if(it.isDirectory()){
            return it
        }else{
            FileTree tmp = zipTree(it)
            for(File s : tmp.files) {
                if (s.toString().endsWith(".html")){
                    tmp.files.remove(s)
                }
            }
            return tmp
        }
    }
    manifest {
        attributes([
            "Specification-Title": "randomplugin",
            "Specification-Vendor": "",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mixins.bxz.json",
            "FMLCorePluginContainsFMLMod": "true",
            "TweakClass": "com.bxzmod.randomplugin.tweak.ModTweaker",
            "ForceLoadAsMod": "true",
            "FMLAT": "accesstransformer.cfg",
            "TweakOrder": "0"
        ])
    }
}


tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}

