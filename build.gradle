buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

version = "1.0"
group= "com.bxzmod.randomplugin" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "RandomPlugin"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

configurations {
    embed
    compile.extendsFrom(embed)
    shadow
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

}

//##########################################################################################################
//########################################    Mixin  Part   ################################################
//##########################################################################################################
/**
* The name of your mixin config. Should match the name of mixin config file, which you placed in src/main/resources/
*/
def yourMixinConfig = 'mixins.randomplugin.json'
/**
* The file with this name will be generated during build. Should math the remap value inside your src/main/resources/*yourMixinConfig*
*/
def refMapForYourConfig = 'mixins.randomplugin.refmap.json'
/**
* Relative path to the new annotation processor. 
* You should download it (https://github.com/TimeConqueror/SpongeMixins/raw/master/mixin-0.8-SNAPSHOT.jar) and then place to the project folder. 
* You may also place it in the inner folders, only thing you should to do is to provide right RELATIVE path.
*/
def relativePathToMixinAP = 'mixin-0.8-SNAPSHOT.jar'

repositories {
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven/"
    }
}


dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    /*
	compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

     */
    shadow('java3d:vecmath:1.3.1')

    compileOnly fileTree(include: ['*.jar'], dir: 'providedLibs')

    embed('org.spongepowered:mixin:0.7.11-SNAPSHOT'){
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }

}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + refMapForYourConfig

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    from configurations.embed.collect {
        if(it.isDirectory()){
            return it
        }else{
            FileTree tmp = zipTree(it)
            for(File s : tmp.files) {
                if (s.toString().endsWith(".html")){
                    tmp.files.remove(s)
                }
            }
            return tmp
        }
    }
    from configurations.shadow.collect {
        if(it.isDirectory()){
            return it
        }else{
            FileTree tmp = zipTree(it)
            for(File s : tmp.files) {
                if (s.toString().endsWith(".html")){
                    tmp.files.remove(s)
                }
            }
            return tmp
        }
    }
    manifest {
        attributes([
                "TweakClass": "com.bxzmod.randomplugin.tweak.ModTweaker",
                'MixinConfigs': yourMixinConfig,
                'FMLCorePluginContainsFMLMod': 'true',
                "ForceLoadAsMod": 'true',
                "FMLAT": "accesstransformer.cfg",
                "TweakOrder": "0"
        ])
    }
}

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {
    def fixedRelPathToAP = relativePathToMixinAP
    if(fixedRelPathToAP.startsWith('./') || fixedRelPathToAP.startsWith('.\\')){
        fixedRelPathToAP = fixedRelPathToAP.substring(2)
    } else if(fixedRelPathToAP.startsWith('/') || fixedRelPathToAP.startsWith('\\')){
        fixedRelPathToAP = fixedRelPathToAP.substring(1)
    }

    tasks.compileJava {
        println "Path: " + projectDir.absolutePath
        options.compilerArgs += [
                // There's a bug in the AnnotationProcessor for 0.7.11 that will generate the annotations pointing to the parent class instead of subclass
                // resulting in the mixin not being applied.  This is fixed in 0.8, however 0.8 needs guava > 21.0, and minecraft ships with 17.0.
                // So as a hacky workaround... ship with 0.7.11, but use the AP from 0.8 for compiling
                "-processorpath", "C:\\Users\\SJ\\.gradle\\caches\\modules-2\\files-2.1\\org.spongepowered\\mixin\\0.8.2\\969be7916b1ba800b33b5a4035aece5de080d8d9\\mixin-0.8.2-processor.jar",
                "-processor", "org.spongepowered.tools.obfuscation.MixinObfuscationProcessorInjection,org.spongepowered.tools.obfuscation.MixinObfuscationProcessorTargets",
                "-Xlint:-sunapi", "-XDenableSunApiLintControl", "-XDignore.symbol.file",
                "-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${mixinSrg}", "-AoutRefMapFile=${refMap}"
        ]
    }
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
        ext.refMap = refMapForYourConfig
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output.classesDir
    appendix = 'deobf'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
